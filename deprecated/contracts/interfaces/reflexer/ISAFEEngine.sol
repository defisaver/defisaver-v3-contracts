// SPDX-License-Identifier: MIT

pragma solidity =0.8.24;

abstract contract ISAFEEngine {
    struct SAFE {
        uint256 lockedCollateral;
        uint256 generatedDebt;
    }

    struct CollateralType {
        // Total debt issued for this specific collateral type
        uint256 debtAmount; // [wad]
        // Accumulator for interest accrued on this collateral type
        uint256 accumulatedRate; // [ray]
        // Floor price at which a SAFE is allowed to generate debt
        uint256 safetyPrice; // [ray]
        // Maximum amount of debt that can be generated with this collateral type
        uint256 debtCeiling; // [rad]
        // Minimum amount of debt that must be generated by a SAFE using this collateral
        uint256 debtFloor; // [rad]
        // Price at which a SAFE gets liquidated
        uint256 liquidationPrice; // [ray]
    }

    mapping(bytes32 => mapping(address => SAFE)) public safes;
    mapping(bytes32 => CollateralType) public collateralTypes;
    mapping(bytes32 => mapping(address => uint256)) public tokenCollateral;

    function safeRights(address, address) public view virtual returns (uint256);
    function coinBalance(address) public view virtual returns (uint256);
    function modifySAFECollateralization(bytes32, address, address, address, int256, int256) public virtual;
    function approveSAFEModification(address) public virtual;
    function transferInternalCoins(address, address, uint256) public virtual;
    function transferSAFECollateralAndDebt(bytes32, address, address, int256, int256) public virtual;
}
